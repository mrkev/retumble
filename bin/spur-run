#!/usr/bin/env node

const program       = require('commander');
const express       = require('express');
const fs            = require('fs-extra');
const get_remote    = require('request-promise');
const app           = express();
const path          = require('path');
const extract       = require('../src/lib/extract')
const str           = require('../src/lib/string')
const localhost     = require('ip').address()
const cors          = require('cors')
const tmp           = require('tmp');

/** Constants */

const DELIMITER = '/*b60572a8-ec4e-11e7-813f-f3216482b08a*/';

/** Program mcjiggs */

program
  .usage('<options> [index]')
  .option('-p, --port [number]', 'Use custom port number', 8080)
  .option('--debug', 'Use higher log-level')
  .parse(process.argv);

/**
 * url of remote blog to use as sample data
 * NOTE: it must be using a spur theme to work
 */
const remote_url = program.args[0] || 'http://spursome.tumblr.com'

/** port to server from */
const port = program.port;

/** HTML Theme skeleton  */
const local_theme = fs.readFileSync(path.resolve(__dirname, 'index.html'), 'utf8')

/** Locantion to place the cache.json */
const cache_file = path.join('.spur', 'cache.json')

/** Cutom log function to handle debug logging */
const console_log = !program.debug ? (() => { }) : console.log;

const cache = fs.readJsonSync(cache_file, { throws: false }) || {}

/** Delimits the blog object in a react theme. */

/** Gets local file */
const get_local = url => new Promise((res, rej) => {
  console_log('   * getting local', url)
  fs.readFile(url, 'utf8', (err, data) => {
    if (err) rej(err)
    else res(data)
  })
})

/** Webpack mcjiggs */

const webpack       = require('webpack');
const config        = require('./webpack.config')(process.cwd())
const compiler      = webpack(config);

app.use(require('webpack-dev-middleware')(compiler, {
  publicPath: config.output.publicPath,
  logLevel: 'warn',
  logTime: true,
  historyApiFallback: true,
}));

app.use(require('webpack-hot-middleware')(compiler));

fs.ensureFileSync(cache_file)

/** Server mcjiggs */

const get_remote_memo = uri => {
  if (!cache[uri]) return get_remote(uri)
    .then(file => {
      cache[uri] = file
      return file
    })
  else {
    console_log(' * Cache hit!')
    fs.writeJsonSync(cache_file, cache)
    return Promise.resolve(cache[uri])
  }
}

app // Route all requests to remote equivalent
.get(/.*/, function (req, res) {
  console_log(` > requested ${req.path}`)
  /**
   * We fetch. If path exist on remote, we return
   * that, otherwise, we fall back to local files.
   */
  get_remote_memo(remote_url + req.path)
  .catch(e => {
    // TODO: Check if is /, if thats the case,
    // its a faulty interent connection
    console_log(` - no remote ${req.path}`)

    return get_local(req.path)
  })
   /**
    * If we fetched a themefile (from remote)
    * we take its info and put it in the local
    * themefile.
    */
  .then(file => {
    if (!extract.isTheme(file)) { return file }
    else {
      const middle = file && str.replaceAll(
        extract.t_string_from_html(file),
        remote_url, `http://${localhost}:${port}`)
      const res = middle
        ? str.revert(local_theme, DELIMITER, DELIMITER, middle)
        : local_theme;
      return res
    }a
  })
  .then(r => {
    console_log(` v returning something for ${req.path}`)
    res.type('html');
    res.send(r);
  })
  .catch(x => {
    if (x.code !== 'ENOENT') console.error(x)
    res.status(404).send('Not found')
  })
})

app.use(cors())

app.listen(port, function () {
  console.log(`
    Testing server listening on http://${localhost}:${port} (localhost)
    > src: ${remote_url}
    `);
});